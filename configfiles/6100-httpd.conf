# SOF-ELK Configuration File
# (C)2016 Lewes Technology Consulting, LLC
#
# This file contains filters, transforms, and enrichments for HTTPD access log messages

filter {
    # this should only occur with syslog-based source records
    if [type] == "httpdlog" and [logsource] {
        mutate {
            add_field => { "path" => "HTTPD log from %{logsource}" }
            # the syslog handler populates this with the syslog-based date. we don't want that, though - we'll replace with the date parsed from the http log entry below
            remove_field => [ "timestamp" ]
        }
    } else if [type] == "httpdlog" and "filebeat" in [tags] {
        mutate {
            add_field => { "path" => "filebeat from %{host}: %{source}" }
        }
    } else if [type] == "httpdlog" {
        mutate {
            add_field => { "path" => "unknown source" }
        }
    }

    if [type] == "httpdlog" {
        grok {
            patterns_dir => "/usr/local/sof-elk/grok-patterns"
            # syslog-based entries, as used on my own servers (HTTP access log pushed via syslog messages)
            match => [ "message", "%{SYSLOGTIMESTAMP} (?:%{SYSLOGFACILITY} )?%{SYSLOGHOST:logsource} %{SYSLOGPROG}: %{HOSTNAME:httpd_vhost} %{COMBINEDAPACHELOG}" ]
            match => [ "message", "%{SYSLOGTIMESTAMP} (?:%{SYSLOGFACILITY} )?%{SYSLOGHOST:logsource} %{SYSLOGPROG}: %{HOSTNAME:httpd_vhost} %{COMMONAPACHELOG}" ]
            # live syslog-based data, partially parsed via the syslog{} input selector
            match => [ "message", "%{HOSTNAME:httpd_vhost} %{COMBINEDAPACHELOG}" ]
            match => [ "message", "%{HOSTNAME:httpd_vhost} %{COMMONAPACHELOG}" ]
            # straight-out NCSA combined/common formats.  combined has to go first, since common will match a combined entry as well - and we break on first match
            match => [ "message", "%{COMBINEDAPACHELOG}" ]
            match => [ "message", "%{COMMONAPACHELOG}" ]
            # ssl_access_log format
            match => [ "message", "\[%{HTTPDATE:timestamp}\] %{IPORHOST:source_ip} %{WORD:ssl_proto} %{NOTSPACE:ssl_sipher} \"(?:%{WORD:verb} %{NOTSPACE:request}(?: HTTP/%{NUMBER:httpversion})?|%{DATA:rawrequest})\" (?:%{NUMBER:bytes}|-)"]
            add_tag => [ "got_apache_log", "parse_done" ]
            tag_on_failure => [ "_gpfail", "fail_ht01" ]
        }
        # if nothing above matched, we might have a corrupt or partial record.  let's try to squeak out whatever fields we can
        if !( "parse_done" in [tags]) {
            grok {
                patterns_dir => "/usr/local/sof-elk/grok-patterns"
                # match first few fields from the syslog-based format
                match => [ "message", "%{SYSLOGTIMESTAMP} %{SYSLOGHOST} %{SYSLOGPROG}: %{HOSTNAME:httpd_vhost} %{IPORHOST:source_ip} %{USER:ident} %{NOTSPACE:auth} \[%{HTTPDATE:timestamp}\]" ]
                # client IP address is first entry in NCSA combined/common formats
                match => [ "message", "^%{IPORHOST:source_ip} %{USER:ident} %{NOTSPACE:auth} \[%{HTTPDATE:timestamp}\]" ]
                # first few fields from ssl_access_log format
                match => [ "message", "^\[%{HTTPDATE:timestamp}\] %{IPORHOST:source_ip}" ]
                # find ANY httplog-formatted date string
                match => [ "message", "\{%{HTTPDATE:timestamp}\]" ]

                add_tag => [ "got_partial_apache_log", "parse_done" ]
                tag_on_failure => [ "_gpfail", "fail_ht02" ]
            }
        }

        if "[timestamp]" {
            date {
                match => [ "timestamp", "dd/MMM/yyyy:HH:mm:ss Z" ]
                remove_field => [ "timestamp" ]
            }
        }

        if [bytes] {
            mutate {
                convert => [ "bytes", "integer" ]
            }
        }
        if [referrer] {
            mutate {
                gsub => [ "referrer", "\"", "" ]
            }
        }
        if [agent] {
            mutate {
                gsub => [ "agent", "\"", "" ]
            }
            useragent {
                source => [agent]
                target => [agentinfo]
            }
        }

        if [program] {
            mutate {
                remove_field => [ "program" ]
            }
        }

        # look at %{request} and see if it ends in a "not page resource" extension. Issue #25.
        if [request] {
            grok {
                patterns_dir => "/usr/local/sof-elk/grok-patterns"
                match => [ "request", "%{URIPATH:requestpath}" ]
                add_tag => [ "find_pagenotpage" ]
            }
            if "find_pagenotpage" in [tags] {
                grok {
                    match => [ "requestpath", "\.(css|js|class|gif|jpg|jpeg|png|bmp|ico|rss|xml|swf)$" ]
                    add_tag => [ "not_page" ]
                    tag_on_failure => [ "page" ]
                }
                mutate {
                    remove_field => [ "requestpath" ]
                    remove_tag => [ "find_pagenotpage" ]
                }
            }
        }

        if "parse_done" in [tags] {
            mutate {
                remove_field => [ "message" ]
            }
        }
    }
}