filter {
    # passivedns records
    if [type] == "archive-passivedns" or (([type] == "archive-syslog" or [type] == "syslog") and [syslog_program] == "passivedns") {
        grok {
            patterns_dir => "/usr/local/for572logstash/grok-patterns"
            match => [ "message", "%{UNIX_MSEC:unix_timestamp}[0-9]*\|\|%{IP:pdns_client_ip}\|\|%{IP:pdns_server_ip}\|\|%{WORD:pdns_rrclass}\|\|%{PDNS_IPORHOST:pdns_query}\|\|%{WORD:pdns_querytype}\|\|%{PDNS_IPORHOST:pdns_answer}\|\|%{INT:pdns_ttl}\|\|%{INT:pdns_rrcount}" ]
            add_tag => [ "got_passivedns", "parse_done" ]
            tag_on_failure => [ "_gpfail", "fail_sl11" ]
        }
    }
    if [type] == "archive-passivedns" and "got_passivedns" in [tags] {
        mutate {
            add_field => {
                "syslog_program" => "passivedns"
                "syslog_hostname" => "0.0.0.0"
            }
        }
    }
    if [type] == "archive-passivedns" or (([type] == "archive-syslog" or [type] == "syslog") and [syslog_program] == "passivedns") and "got_passivedns" in [tags] {
        mutate {
            # remove trailing dots for both queries and answers
            gsub => [ "pdns_query", "\.$", "" ]
            gsub => [ "pdns_answer", "\.$", "" ]

            # remove the decimal point in the timestamp, so instead of sec.msec, we have msec
            gsub => [ "unix_timestamp", "\.", "" ]
        }

        date {
            match => [ "unix_timestamp", "UNIX_MS" ]
        }

        mutate {
            remove_field => [ "unix_timestamp" ]
            add_tag => [ "parse_done" ]
        }

        if [pdns_client_ip] and [pdns_query] and [pdns_answer] {
            mutate {
                replace => [ "message", "DNS: %{pdns_client_ip} (%{pdns_query} -> %{pdns_answer})" ]
            }
        }

        if [pdns_answer] {
            grok {
                match => [ "pdns_answer", "%{IP:pdns_answer_ip}" ]
            }
        }

        if [pdns_client_ip] {
            geoip {
                database => "/usr/local/share/GeoIP/GeoIPASNum.dat"
                source => "[pdns_client_ip]"
                target => "[pdns_clientgeo]"
            }
            geoip {
                database => "/usr/local/share/GeoIP/GeoLiteCity.dat"
                source => "[pdns_client_ip]"
                target => "[pdns_clientgeo]"
            }
            mutate {
                replace => [ "ips", "%{ips}%{pdns_client_ip} " ]
            }
        }
        if [pdns_clientgeo][ip] {
            mutate {
                remove_field => [ "[pdns_clientgeo][ip]" ]
            }
        }

        if [pdns_server_ip] {
            geoip {
                database => "/usr/local/share/GeoIP/GeoIPASNum.dat"
                source => "[pdns_server_ip]"
                target => "[pdns_servergeo]"
            }
            geoip {
                database => "/usr/local/share/GeoIP/GeoLiteCity.dat"
                source => "[pdns_server_ip]"
                target => "[pdns_servergeo]"
            }
            mutate {
                replace => [ "ips", "%{ips}%{pdns_server_ip} " ]
            }
        }
        if [pdns_servergeo][ip] {
            mutate {
                remove_field => [ "[pdns_servergeo][ip]" ]
            }
        }

        if [pdns_answer_ip] {
            geoip {
                database => "/usr/local/share/GeoIP/GeoIPASNum.dat"
                source => "[pdns_answer_ip]"
                target => "[pdns_answergeo]"
            }
            geoip {
                database => "/usr/local/share/GeoIP/GeoLiteCity.dat"
                source => "[pdns_answer_ip]"
                target => "[pdns_answergeo]"
            }
            mutate {
                replace => [ "ips", "%{ips}%{pdns_answer_ip} " ]
            }
        }
        if [pdns_answergeo][ip] {
            mutate {
                remove_field => [ "[pdns_answergeo][ip]" ]
            }
        }
    }
}