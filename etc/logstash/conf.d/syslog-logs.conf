input {
    file {
        type => "archive-syslog"
        path => [ "/usr/local/logstash-syslog/**/*" ]
        sincedb_path => "/var/db/logstash/sincedb"
        start_position => "beginning"
        exclude => [ "*.gz", "*.zip" ]
    }
    syslog {
        port => 5514
        type => "syslog"
        use_labels => false
    }
}

filter {
    if [type] == "syslog" {
        mutate {
            rename => [ "program", "syslog_program" ]
            rename => [ "logsource", "syslog_hostname" ]
            rename => [ "pid", "syslog_pid" ]
            rename => [ "timestamp", "syslog_timestamp" ]
            add_field => [ "path", "syslog from %{syslog_hostname}" ]
            add_tag => [ "got_syslog_timestamp", "got_syslog_host" ]
            ### DEBUG
            ###add_field => [ "orig_message", "%{message}" ]
        }
    }

    # Check if syslog message has PRI.     If so then :
    #  strip the syslog PRI part and create facility and severity fields.
    #  the original syslog message is saved in field %{syslog_raw_message}.
    #  the extracted PRI is available in the %{syslog_pri} field.
    #
    #  You get %{syslog_facility_code} and %{syslog_severity_code} fields.
    #  You also get %{syslog_facility} and %{syslog_severity} fields if the
    #  use_labels option is set True (the default) on syslog_pri filter.
    if [type] == "archive-syslog" and [message] =~ /^<\d+>/ {
        mutate { add_tag => [ "has_pri" ] }
    }

    if [type] == "archive-syslog" and "has_pri" in [tags] {
        grok {
            match => [ "message", "<%{POSINT:syslog_pri}>%{SPACE}%{GREEDYDATA:message_remainder}" ]
            add_tag => [ "got_syslog_pri" ]
            add_field => [ "syslog_raw_message", "%{message}" ]
            tag_on_failure => [ "_gpfail", "fail_sl01" ]
        }
    }

    if [type] == "archive-syslog" and "got_syslog_pri" in [tags] and [message_remainder] and [message_remainder] != "" {
        mutate {
            replace => [ "message", "%{message_remainder}" ]
        }
    } else if [type] == "archive-syslog" and "got_syslog_pri" in [tags] {
        mutate {
            replace => [ "message", "<null message>" ]
        }
    }

    if [type] == "archive-syslog" and "got_syslog_pri" in [tags] {
        mutate {
            # XXX must not be combined with replacement which uses same field
            remove_field => [ "message_remainder" ]
        }
    }

    # strip the syslog timestamp and force event timestamp to be the same.
    # the original string is saved in field %{syslog_timestamp}.
    # the original logstash input timestamp is saved in field %{received_at}.
    if [type] == "archive-syslog" {
        grok {
            match => [ "message", "%{SYSLOGTIMESTAMP:syslog_timestamp}%{SPACE}%{GREEDYDATA:message_remainder}" ]
            add_tag => [ "got_syslog_timestamp" ]
            add_field => [ "received_at", "%{@timestamp}" ]
            tag_on_failure => [ "_gpfail", "fail_sl02" ]
        }
    }

    if [path] and [type] == "archive-syslog" {
        grok {
            match => [ "path", "%{YEAR:path_year}" ]
            add_tag => [ "got_path_year" ]
            tag_on_failure => [ "_gpfail", "fail_sl03" ]
        }
    }

    if "got_path_year" in [tags] {
        mutate {
            replace => [ "syslog_timestamp", "%{syslog_timestamp} %{path_year}" ]
            remove_field => "path_year"
        }
    }

    if [type] == "archive-syslog" and "got_syslog_timestamp" in [tags] and [message_remainder] and [message_remainder] != "" {
        mutate {
            replace => [ "message", "%{message_remainder}" ]
        }
    } else if [type] == "archive-syslog" and "got_syslog_timestamp" in [tags] {
        mutate {
            replace => [ "message", "<null message>" ]
        }
    }

    if [type] == "archive-syslog" and "got_syslog_timestamp" in [tags] {
        mutate {
            # XXX must not be combined with replacement which uses same field
            remove_field => [ "message_remainder" ]
        }
    }

    if ([type] == "archive-syslog" or [type] == "syslog") and "got_syslog_timestamp" in [tags] {
        date {
            # season to taste for your own syslog format(s)
            match => [ "syslog_timestamp", "MMM dd HH:mm:ss", "MMM  d HH:mm:ss", "ISO8601", "MMM dd HH:mm:ss yyyy", "MMM  d HH:mm:ss yyyy" ]
        }
    }

    if ([type] == "archive-syslog" or [type] == "syslog") and [message] =~ /MSWinEventLog/ {
        mutate {add_tag => [ "got_eventlog_msg" ] }
    }

    # strip the host field from the syslog line.
    # the extracted host field becomes the logstash %{host} metadata
    # and is also available in the field %{syslog_hostname}.
    # the original logstash host is saved in field %{logstash_source}.
    if [type] == "archive-syslog" and !("got_eventlog_msg" in [tags]) {
        grok {
            patterns_dir => "/etc/logstash/patterns"
            match => [ "message", "%{SYSLOGHOST:syslog_hostname}%{SPACE}%{GREEDYDATA:message_remainder}" ]
            add_tag => [ "got_syslog_host" ]
            add_field => [ "logstash_source", "%{host}" ]
            tag_on_failure => [ "_gpfail", "fail_sl04" ]
        }
    }

    if [type] == "archive-syslog" and "got_syslog_host" in [tags] and [message_remainder] and [message_remainder] != "" {
        mutate {
            replace => [ "host", "%{syslog_hostname}" ]
            replace => [ "message", "%{message_remainder}" ]
        }
    } else if [type] == "archive-syslog" and "got_syslog_host" in [tags] {
        mutate {
            replace => [ "message", "<null message>" ]
        }
    }

    if ([type] == "archive-syslog" or [type] == "syslog") and "got_syslog_host" in [tags] {
        mutate {
            # message_remainder no longer needed.
            remove_field => [ "message_remainder" ]
        }
    }

    # strip the program and optional pid field from the syslog line.
    # available in the field %{syslog_program} and %{syslog_pid}.
    if [type] == "archive-syslog" and !("got_eventlog_msg" in [tags]) {
        grok {
            match => [ "message", "%{PROG:syslog_program}(?:\[%{POSINT:syslog_pid}\])?:%{SPACE}(?:\[%{BASE10NUM:ipt_uptime}\]%{SPACE})?%{GREEDYDATA:message_remainder}" ]
            add_tag => [ "got_syslog_program" ] 
            tag_on_failure => [ "_gpfail", "fail_sl05" ]
        }
    }

    # handle snare records
    if ([type] == "archive-syslog" or [type] == "syslog") and "got_eventlog_msg" in [tags] {
        grok {
            match => [ "message", "%{SYSLOGHOST:syslog_hostname}%{SPACE}MSWinEventLog#011(%{INT:evt_crit:int})?#011(%{DATA:evt_logsource})?#011(%{INT})?#011(%{DATA})?#011(%{INT:evt_id:int})?#011(%{DATA:evt_sourcename})?#011(%{DATA:evt_username})?#011(%{DATA:evt_sidtype})?#011(%{DATA:evt_logtype})?#011(%{DATA:evt_hostname})?#011(%{DATA})?#011(%{DATA:evt_data})?#011(%{DATA:evt_fulldata})?#011" ]
            add_tag => [ "parsed_snare_msg" ]
            add_field => [ "logstash_source", "%{host}" ]
            tag_on_failure => [ "_gpfail", "fail_sl06" ]
        }
    }
    if [evt_fulldata] {
        mutate {
        replace => [ "message", "%{evt_fulldata}" ]
        remove_field => [ "evt_fulldata" ]
        }
    }
    if ([type] == "archive-syslog" or [type] == "syslog") and "parsed_snare_msg" in [tags] {
        mutate {
            replace => [ "host", "%{syslog_hostname}" ]
            add_tag => [ "parse_done" ]
        }
    }

    if ([type] == "archive-syslog" or [type] == "syslog") and "got_syslog_program" in [tags] and [message_remainder] and [message_remainder] != "" and !( "parse_done" in [tags]) {
        mutate {
            replace => [ "message", "%{message_remainder}" ]
        }
    } else if ([type] == "archive-syslog" or [type] == "syslog") and "got_syslog_program" in [tags] {
        mutate {
            replace => [ "message", "<null message>" ]
        }
    }

    if ([type] == "archive-syslog" or [type] == "syslog") and "got_syslog_program" in [tags] and !( "parse_done" in [tags]) {
        mutate {
            # message_remainder no longer needed.
            remove_field => [ "message_remainder" ]
        }
    }

    # squid access log parsing
    if ([type] == "archive-syslog" or [type] == "syslog") and [syslog_program] == "squid" and [message] =~ / HTTP\/\d\.\d/ {
        grok {
            match => [ "message", "%{IPORHOST:squid_client}%{SPACE}%{USER:squid_identuser}%{SPACE}%{USER:squid_authuser}%{SPACE}\[%{INT:squid_day}/%{MONTH:squid_month}/%{YEAR:squid_year}:%{TIME:squid_time}%{SPACE}%{ISO8601_TIMEZONE:squid_tz}\]%{SPACE}%{GREEDYDATA:message_remainder}" ]
            add_tag => [ "got_squid_access" ] 
            tag_on_failure => [ "_gpfail", "fail_sl07" ]
        }
    }
    if ([type] == "archive-syslog" or [type] == "syslog") and "got_squid_access" in [tags] and [message_remainder] and [message_remainder] != "" {
        mutate {
            replace => [ "message", "%{message_remainder}" ]
            remove_field => [ "squid_identuser", "squid_authuser", "squid_day", "squid_month", "squid_year", "squid_time", "squid_tz" ]
        }
    } else if ([type] == "archive-syslog" or [type] == "syslog") and "got_squid_access" in [tags] {
        mutate {
            replace => [ "message", "<null message>" ]
        }
    }
    if ([type] == "archive-syslog" or [type] == "syslog") and "got_squid_access" in [tags] {
        mutate {
            remove_field => [ "message_remainder" ]
        }
    }
    if ([type] == "archive-syslog" or [type] == "syslog") and "got_squid_access" in [tags] {
        grok {
            match => [ "message", "\"%{WORD:squid_method}%{SPACE}%{NOTSPACE:squid_proto}://%{HOSTNAME:squid_host}/?(?:%{NOTSPACE:squid_request})?%{SPACE}HTTP/%{NUMBER:squid_httpversion}\"%{SPACE}%{NUMBER:squid_returncode:int}%{SPACE}%{NUMBER:squid_bytes:int}%{SPACE}%{NOTSPACE:squid_referer}%{SPACE}%{QS:squid_useragent}%{SPACE}%{WORD:squid_cachestatus}:%{WORD:squid_hierarchystatus}" ]
            add_tag => [ "got_full_squid_access" ]
            add_field => [ "squid_fullurl", "%{squid_proto}://%{squid_host}/%{squid_request}" ]
            tag_on_failure => [ "_gpfail", "fail_sl08" ]
        }
    }
    if ([type] == "archive-syslog" or [type] == "syslog") and "got_full_squid_access" in [tags] {
        mutate {
            remove_field => [ "squid_httpversion", "squid_cachestatus", "squid_hierarchystatus", "squid_proto" ]
            gsub => [
                "squid_referer", "\"", "",
                "squid_useragent", "\"", ""
            ]
            add_tag => [ "parse_done" ]

        }
        if [squid_client] and [squid_method] and [squid_fullurl] and [squid_returncode] {
            mutate {
                replace => [ "message", "Proxy Request: %{squid_client} %{squid_method} %{squid_fullurl} (ret %{squid_returncode})" ]
            }
        }
    }

    #dhcp messages (NAK, REQUEST, ACK, etc)
    if ([type] == "archive-syslog" or [type] == "syslog") and [syslog_program] == "dhcpd" and [message] =~ /^DHCP[A-Z]+ / {
        grok {
            match => [ "message", "%{WORD:dhcp_messagetype} %{NOTSPACE} %{IP:dhcp_ip}(?: %{NOTSPACE})? (?:\()?%{MAC:dhcp_hwaddr}(?:\))? (\(%{HOSTNAME:dhcp_hostname}\))?" ]
            add_tag => [ "got_dhcp", "parse_done" ]
            tag_on_failure => [ "_gpfail", "fail_sl09" ]
        }

        if [dhcp_messagetype] and [dhcp_hwaddr] and [dhcp_ip] {
            mutate {
                replace => [ "message", "%{dhcp_messagetype}: %{dhcp_hwaddr} / %{dhcp_ip}" ]
            }
            if [dhcp_hostname] {
                mutate {
                    replace => [ "message", "%{message} (%{dhcp_hostname})" ]
                }
            }
        }
    }

    # dns query log messages
    if ([type] == "archive-syslog" or [type] == "syslog") and [syslog_program] == "named" and [message] =~ / query: / {
        grok {
            match => [ "message", "client %{IPORHOST:dns_client}#%{POSINT}: query: %{HOST:dns_query} %{NOTSPACE} %{NOTSPACE:dns_rectype}" ]
            add_tag => [ "got_dnsquery", "parse_done" ]
            tag_on_failure => [ "_gpfail", "fail_sl10" ]
        }

        if [dns_client] and [dns_query] {
            mutate {
                replace => [ "message", "DNS Query: %{dns_client} (%{dns_query})" ]
            }
        }
    }

    # all other syslog messages
    if ([type] == "archive-syslog" or [type] == "syslog") and !("parse_done" in [tags]) {
        grok {
            patterns_dir => "/etc/logstash/patterns"
            match => [ "message", "%{IPTABLES}" ]
            add_tag => [ "got_iptables", "parse_done" ]
            tag_on_failure => [ "_defaultparse" ]
        }
        grok {
            patterns_dir => "/etc/logstash/patterns"
            match => [ "message", "%{CISCO_ASA_MSG}" ]
            add_tag => [ "got_cisco", "parse_done" ]
            tag_on_failure => [ "_defaultparse" ]
        }
    }
    if "parse_done" in [tags] and "_defaultparse" in [tags] {
        mutate {
            remove_tag => [ "_defaultparse" ]
        }
    }
}
